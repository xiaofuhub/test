1.剪切板(Clipboard)
剪贴板是使应用程序能够传输数据的一组功能和消息。 由于所有应用程序都可以访问剪贴板，因此可以轻松地在应用程序之间或应用程序内传输数据。
实现方式
剪贴板是用户驱动的。 窗口仅应响应用户的命令，才应将数据传输到剪贴板或从剪贴板传输数据。 窗口不得在用户不知情的情况下使用剪贴板传输数据。
2.COM组件
COM是一个独立于平台的，分布式的，面向对象的系统，用于创建可以交互的二进制软件组件。 COM是Microsoft的OLE（复合文档）和ActiveX（支持Internet的组件）技术的基础技术。
适用时
可以使用多种编程语言来创建COM对象。 面向对象的语言（例如C ++）提供了简化COM对象的实现的编程机制。 这些对象可以在单个进程中，也可以在其他进程中，甚至在远程计算机上也可以。
实现方式
1.COM客户端是代码或对象获得指向COM服务器的指针并通过调用其接口方法使用其服务的任何对象。 
2.COM服务器是为客户端提供服务的任何对象。这些服务采用COM接口实现的形式，任何能够获取指向服务器对象上接口之一的指针的客户端都可以调用这些服务。
服务器有两种主要类型，进程内和进程外。
进程内服务器在动态链接库（DLL）中实现，进程外服务器在可执行文件（EXE）中实现。
进程外服务器可以驻留在本地计算机上，也可以驻留在远程计算机上。另外，COM提供了一种机制，该机制允许进程内服务器（DLL）在替代EXE进程中运行，从而获得能够在远程计算机上运行该进程的优势
3.数据拷贝(Data Copy)
数据复制功能使您可以将数据从一个应用程序发送到另一个应用程序。
实现方式
数据复制使应用程序可以使用WM_COPYDATA消息将信息发送到另一个应用程序。 此方法需要发送应用程序和接收应用程序之间的合作。 接收应用程序必须知道信息的格式，并且能够识别发送者。 发送应用程序无法修改任何指针引用的内存。
4.动态数据交换(DDE)
DDE是一种协议，使应用程序可以交换各种格式的数据。应用程序可以使用DDE进行一次数据交换，也可以进行正在进行的交换，在这些交换中，应用程序会在新数据可用时相互更新。
实现方式
DDE使用的数据格式与剪贴板使用的数据格式相同。可以将DDE视为剪贴板机制的扩展。剪贴板几乎总是用于一次性响应用户命令，例如从菜单中选择“粘贴”命令。 
DDE通常也由用户命令启动，但是它通常可以继续运行而无需进一步的用户交互。您还可以为具有更高耦合通信需求的应用程序之间的专用IPC定义自定义DDE数据格式。
DDE交换可以在同一计算机或网络上不同计算机上运行的应用程序之间发生。
缺点
1.技术相对较老，效率低。
5.File Mapping
文件映射使进程可以将文件的内容视为进程的地址空间中的内存块。
实现原理
当两个或多个进程访问相同的文件映射时，每个进程都会在其自己的地址空间中接收指向内存的指针，该指针可用于读取或修改文件的内容。进程必须使用同步对象（例如信号量），以防止多任务环境中的数据损坏。
6.Mailslots
邮槽提供单向通信
实现原理
邮筒客户端可以将消息发送到其本地计算机上的邮筒，另一台计算机上的邮筒或指定网络域中所有计算机上具有相同名称的所有邮筒。 广播到域中所有邮槽的邮件不能超过400字节，而发送到单个邮槽的邮件仅受邮槽服务器创建邮槽时指定的最大邮件大小限制。
7.Pipes
一.匿名管道：
匿名管道提供了一种有效的方法，可以将标准输入或输出重定向到同一台计算机上的子进程
实现原理：
匿名管道用于重定向子进程的标准输入或输出，以便它可以与其父进程交换数据。要双向交换数据（双工操作），必须创建两个匿名管道。父进程使用其写入句柄将数据写入一个管道，而子进程使用其读取句柄从该管道读取数据。
同样，子进程将数据写入另一个管道，而父进程从该管道读取数据。匿名管道不能在网络上使用，也不能在不相关的进程之间使用。
二.命名管道
命名管道提供了一个简单的编程接口，用于在两个进程之间传输数据，无论它们位于同一台计算机上还是通过网络
实现原理：
命名管道服务器进程使用众所周知的名称或要传达给其客户端的名称来创建命名管道。知道管道名称的命名管道客户端进程可以打开其另一端，但受命名管道服务器进程指定的访问限制。服务器和客户端都连接到管道后，他们可以通过在管道上执行读取和写入操作来交换数据。

8.RPC
RPC使应用程序可以远程调用函数。因此，RPC使IPC像调用函数一样容易。 RPC在单台计算机上或网络上的不同计算机上的进程之间运行。
实现原理：
定义了客户程序与服务器程序之间的接口后，必须将其传递给MIDL编译器。该编译器生成将本地过程调用转换为远程过程调用的存根。存根是占位符函数，用于调用运行时库函数，该库函数管理远程过程调用。这种方法的优点是，网络几乎对您的分布式应用程序完全透明。您的客户程序将调用本地程序。自动将它们转换为远程呼叫的工作。 MIDL编译器为您生成了所有用于转换数据，访问网络和检索结果的代码，这些代码对于您的应用程序是不可见的
9.Windows Sockets
Windows套接字是与协议无关的接口。 它利用了底层协议的通信功能，能够支持当前和新兴的网络功能。
实现原理：
socket是一种"打开―读/写―关闭"模式的实现，服务器和客户端各自维护一个"文件"，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。


https://docs.microsoft.com/en-us/windows/win32/ipc/interprocess-communications    //进程通讯资料
