https://docs.microsoft.com/en-us/windows/win32/ipc/interprocess-communications    //进程通讯资料

一：共享内存
实现原理：进程通讯最快的一种方式，创建映射文件，然后将文件地址映射至进程中，实现不同进程对该地址的访问，不需要拷贝动作。
优点：
1.访问速度快，直接访问系统内存
2.支持x32->x64访问  // https://blog.csdn.net/gao271003105/article/details/85257422. 环形读写缓冲区
缺点：
1.数据同步问题。
2.不能超过系统的内存大小.
3.它只适合点对点的通信，如果要多个进程间通信，内存区的数量会呈线性增长，会造成数据的冗余
开源调试工具：
X64Dbg,Nanomite
作用：逆向调试工具，获取DLL地址信息
实现方式：通过文件映射进行数据传输，x32与x64区分，通过写死的标志

二：Windows 命名管道（FIFO）
简介：创建Pipe内核对象进行进程间通讯，管道文件是一个特殊的文件，数据存在内存中。 
实现原理：管道仅存在于特定主机内，它们指的是虚拟文件之间的缓冲，或连接该主机内进程的输出/输入。 管道中没有数据包的概念。
优点：
1.可以实现任意关系的进程间的通信
2.不需要锁操作
3.支持x32->x64访问

缺点： 
1.堆中的内存碎片增多。

匿名管道
1.单向流动，并且只能够在同一电脑上的各个进程之间流动。
2.必须存在父子关系的进程才能进行通讯。



开源调试工具：
Decoda(Lua最牛调试器,C++实现)
实现方式：1.实现进程通讯使用的是命名管道，同步方式为临界区，通过xml进行数据转换.

三：邮件槽
实现原理：单向进程间通信，只允许从客户端发送到服务器，没有可靠性保证，根据广播通信体系所设计，使用邮槽可以建立不可靠的单向数据传输。其优点就是可以很方便的向一个或者多个服务器广播消息
优点：
1.可以实现任意关系的进程间的通信
2.支持x32->x64访问

缺点：
1.信息长度存在最大长度限制。
2.传输数据通过不可靠的数据报(UDP)

四：windows套接字 (socket)
实现原理：套接字使用IPv4或IPv6打包通信； 该通信可以扩展到本地主机之外。 套接字的不同端点可以共享相同的IP地址。 但是，它们必须在不同的TCP / UDP端口上侦听
优点：
1.传输数据为字节级，传输数据可自定义，数据量小效率高；
2.传输数据时间短，性能高；
3.适合于客户端和服务器端之间信息实时交互；
4.可以加密,数据安全性强
5.支持x32->x64访问
缺点：
1.性能。协议栈可能会深很多层，并且数据可能会被处理和复制多次。网络通信可能具有受限的吞吐量和高延迟。

五：消息机制
实现原理：直接发送消息
优点：
1.实现原理简单
缺点：
1.传递消息容易导致界面卡死。
2.通讯窗口必须存在。

六：剪切板
实现原理：由系统分配的一块内存，然后通过进程去访问，使用GlobalAlloc()申请。
优点：
1.支持x32->x64访问
缺点：
1.效率低。
2.无法实现实时交互。
3.多个进程同时访问时，容易丢失数据。

七：NetBIOS
实现原理：
简单的网络通讯,基于会话层实现，其实现方式已被RPC框架覆盖。
//http://www.comprg.com.cn/post_show.asp?id=2641 // 使用说明

八：RPC
实现原理：
1.RPC框架主要用到了动态代理模式和反射机制，至于http协议，只是传输协议而已。
2.RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。
客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。
在服务器端，进程保持睡眠状态直到调用信息到达为止。
当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行
1.Proxy代理层
2.Serialize序列化层


将请求序列化和结果反序列化。




3.Invoke网络模块


主要用于网络通信的相关处理。



4.Container容器组件


这层主要用于代理层监听网络请求。
优点：
1.高性能、紧密耦合的分布式应用程序。
2.支持远程调试。
3.采用分布式设计，能适用于大数据访问。
4.支持x32->x64访问。


九：COM Server(对象连接与嵌入 OLE)
实现原理：创建Com Server加载DLL，通过Com Client与Server通讯，实现跨进程通讯.
优点：
1.支持x32->x64访问
缺点：
1.需多创建Com Server

十：Wow64
实现原理：SysWow64目录下通过调用ntdll.dll中的API，获取64位程序地址.
优点：
1.支持x32->x64访问
2.内存开销小，调用windows内核，进行对x64访问，不需要开辟额外的内存映射文件
缺点：

十一：DLL注入
实现原理：通过Load DLL 获取DLL地址(GetProcessMemory()).
缺点：
1.不支持x32->x64

十二：DDE(动态数据交换)
工作原理：
甲方申请一块全局内存，然后把内存指针postmessage到乙方,乙方根据收到的指针访问那块全局内存。消息格式(WM_DDE_XXX)
优点：
1.支持x32->x64
缺点：
1.数据格式不能自定义，传输数据API只能接受文本数据以及命令、宏，而不能传输图像数据。

C#
1.ICordebug         // 供.net调用，由COM API封装而来。
2.SharpDevelop      //C#开源编译器，Debugger调用的是ICorDebug接口实现调试功能.


排名靠前的调试器：   //https://sourceforge.net/directory/development/debuggers/os:windows/
1. MinGW 
下载量：平均一周 上百万。













